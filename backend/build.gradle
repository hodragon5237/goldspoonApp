buildscript {
	ext {
		springBootVersion = '2.4.1'
		mooworkVersion = '1.2.0'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
	}
}

plugins {
	id 'org.springframework.boot' version '2.4.1'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

group = 'com.project827'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-jdbc"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
//	implementation 'redis.clients:jedis:3.3.0'
//	implementation 'it.ozimov:embedded-redis:0.7.2'
//	implementation "io.projectreactor:reactor-core:3.3.0.RELEASE"
//	implementation 'org.springframework.session:spring-session-data-redis'
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//	implementation 'io.lettuce:lettuce-core:5.0.3.RELEASE'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.4.1'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

def webappDir = "$projectDir/frontend"

// node 버전 및 npm, node 설치파일 저장 디렉토리 명시
node {
	version = '14.15.4'
	download= false
	workDir = file("${project.buildDir}/nodejs")
	npmWorkDir = file("${project.buildDir}/npm")
}

// npm install 과정
task appNpmInstall(type: NpmTask) {
	workingDir = file("${project.projectDir}/frontend")
	args = ["install"]
}

// npm build
task npmBuild(type: NpmTask) {
	workingDir = file("${project.projectDir}/frontend")
	args = ['run-script', 'build']
}

// 빌드된 결과 resources로 이동
task copyWebApp(type: Copy) {
	from "frontend/build"
	into 'build/resources/main/static/.'
}

npmBuild.dependsOn appNpmInstall
copyWebApp.dependsOn npmBuild
compileJava.dependsOn copyWebApp

test {
	useJUnitPlatform()
}
